// Вам потрібно створити умовний тип, що служить для встановлення типу, що повертається з функції. Як параметр типу повинен обов'язково виступати функціональний тип.

type InferReturnType<T> = T extends (...args: any[]) => infer U ? U : never;

// Вам потрібно створити умовний тип, який приймає функціональний тип з одним параметром (або задовільним) та повертає кортеж, де перше значення - це тип, що функція повертає, а другий - тип її параметру

type InferTypeWithParam<T> = T extends (param: infer U) => infer W
  ? [W, U]
  : never;

// Створіть тип, який об'єднує властивості двох об'єктів тільки в тому випадку, якщо їхні значення мають спільний тип. Наприклад: { a: number; b: string } та { b: string; c: boolean } => { b: string; }

type CombineType<T extends {}, U extends {}> = {
  [K in Extract<keyof T, keyof U>]: T[K];
};
